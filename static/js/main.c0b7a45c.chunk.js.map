{"version":3,"sources":["App.js","index.js"],"names":["ymaps","window","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handlePointListItemDragEnd","event","_draggedPoint","handlePointListItemDragStart","draggedPoint","dataTransfer","setData","handlePointListItemDrop","dropOntoPoint","preventDefault","setState","state","newStatePoints","points","slice","dropOntoPointInd","indexOf","draggedPointInd","splice","removePoint","pointInd","pointToREmove","map","geoObjects","remove","ymapsObj","handleNewPointSubmit","newPointName","newPointId","nextPointId","newYmapsPoint","GeoObject","geometry","type","coordinates","getCenter","properties","balloonContent","draggable","events","add","mapRefreshRoute","push","id","name","routeCoordinates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","pointCoordinates","value","getBounds","err","return","ymapsRouteObj","setCoordinates","handleNewPointNameChange","target","mapReady","newPointNameInput","React","createRef","_this2","react_default","a","createElement","className","onSubmit","disabled","required","autoFocus","placeholder","onChange","ref","point","key","onDragStart","e","onDragOver","allowDrop","onDrop","onDragEnd","onClick","_this3","ready","Map","center","zoom","Polyline","current","focus","prevProps","prevState","snapshot","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"yNAEMA,SAAQC,OAAOD,OA8KNE,cA3Kb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KA8DRQ,2BAA6B,SAACC,GAC5BR,EAAKS,cAAgB,MAhEHT,EAmEpBU,6BAA+B,SAACF,EAAOG,GACrCX,EAAKS,cAAgBE,EACrBH,EAAMI,aAAaC,QAAQ,OAAQ,cArEjBb,EAwEpBc,wBAA0B,SAACN,EAAOO,GAChCP,EAAMQ,iBACFhB,EAAKS,eACPT,EAAKiB,SAAS,SAACC,EAAOnB,GACpB,IAAMoB,EAAiBD,EAAME,OAAOC,QAC9BC,EAAmBJ,EAAME,OAAOG,QAAQR,GACxCS,EAAkBN,EAAME,OAAOG,QAAQvB,EAAKS,eAGlD,OAFAU,EAAeM,OAAOD,EAAiB,GACvCL,EAAeM,OAAOH,EAAkB,EAAGtB,EAAKS,eACzC,CAAEW,OAAQD,MAjFHnB,EA0FpB0B,YAAc,SAACC,GACb3B,EAAKiB,SAAS,SAACC,EAAOnB,GACpB,IAAMoB,EAAiBD,EAAME,OAAOC,QAC9BO,EAAgBV,EAAME,OAAOO,GAGnC,OAFAR,EAAeM,OAAOE,EAAU,GAChC3B,EAAK6B,IAAIC,WAAWC,OAAOH,EAAcI,UAClC,CAAEZ,OAAQD,MAhGDnB,EAoHpBiC,qBAAuB,SAACzB,GACtBA,EAAMQ,iBAEN,IAAMkB,EAAelC,EAAKkB,MAAMgB,aAChClC,EAAKiB,SAAS,SAACC,EAAOnB,GACpB,IAAIoB,EAAiBD,EAAME,OAAOC,QAC5Bc,EAAanC,EAAKoC,YACxBpC,EAAKoC,cACL,IAAIC,EAAgB,IAAIzC,EAAM0C,UAAU,CACtCC,SAAU,CACRC,KAAM,QACNC,YAAazC,EAAK6B,IAAIa,aAExBC,WAAY,CACVC,eAAgBV,IAEjB,CAAEW,WAAW,IAchB,OAZAR,EAAcS,OAAOC,IAAI,iBAAkB,WAEzC/C,EAAKgD,oBAEPhD,EAAK6B,IAAIC,WAAWiB,IAAIV,GACxBlB,EAAe8B,KACb,CACEC,GAAIf,EACJgB,KAAMjB,EACNF,SAAUK,IAGP,CAAEjB,OAAQD,EAAgBe,aAAc,OAlJ/BlC,EAsJtBgD,gBAAkB,WACd,IAAMI,EAAmB,GADLC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAEpB,QAAAC,EAAAC,EAAkB1D,EAAKkB,MAAME,OAA7BuC,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAqC,KAE/BU,EAF+BN,EAAAO,MAENhC,SAASO,SAAS0B,YAAY,GAC3Db,EAAiBH,KAAKc,IALJ,MAAAG,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GAOpBvD,EAAKoE,cAAc7B,SAAS8B,eAAejB,IA7JzBpD,EAgKpBsE,yBAA2B,SAAC9D,GAC1BR,EAAKiB,SAAS,CAAEiB,aAAc1B,EAAM+D,OAAOP,SA/J3ChE,EAAKkB,MAAQ,CACXgB,aAAc,GAMdd,OAAQ,GACRoD,UAAU,GAEZxE,EAAK6B,SAAM2B,EACXxD,EAAKoC,YAAc,EACnBpC,EAAKoE,mBAAgBZ,EACrBxD,EAAKyE,kBAAoBC,IAAMC,YAfb3E,wEAiBX,IAAA4E,EAAAzE,KACP,OACE0E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QAAME,SAAU9E,KAAK8B,sBACnB4C,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,SACEG,UAAW/E,KAAKe,MAAMsD,SACtBW,UAAQ,EACRC,WAAS,EACT5C,KAAK,OACL6C,YAAY,OACZrB,MAAO7D,KAAKe,MAAMgB,aAClBoD,SAAUnF,KAAKmE,yBACfiB,IAAKpF,KAAKsE,qBAGdI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACX7E,KAAKe,MAAME,OAAOS,IAAI,SAAC2D,EAAO7D,GAAR,OACrBkD,EAAAC,EAAAC,cAAA,MACEU,IAAKD,EAAMtC,GACXL,WAAS,EACT6C,YAAa,SAACC,GAAD,OAAOf,EAAKlE,6BAA6BiF,EAAGH,IACzDI,WAAYhB,EAAKiB,UACjBC,OAAQ,SAACH,GAAD,OAAOf,EAAK9D,wBAAwB6E,EAAGH,IAC/CO,UAAWnB,EAAKrE,2BAChByE,UAAU,SAEVH,EAAAC,EAAAC,cAAA,YACGS,EAAMrC,MAET0B,EAAAC,EAAAC,cAAA,UACEiB,QAAS,SAACxF,GAAD,OAAWoE,EAAKlD,YAAYC,IACrCqD,UAAU,UAFZ,UAURH,EAAAC,EAAAC,cAAA,OAAK7B,GAAG,MAAM8B,UAAU,2CA4BnBxE,GACTA,EAAMQ,6DAaY,IAAAiF,EAAA9F,KAalBP,EAAMsG,MAZY,WAChBD,EAAKhF,SAAS,CAACuD,UAAU,IACzByB,EAAKpE,IAAM,IAAIjC,EAAMuG,IAAI,MAAO,CAC9BC,OAAQ,CAAC,MAAO,OAChBC,KAAM,KAERJ,EAAK7B,cAAgB,IAAIxE,EAAM0G,SAAS,CAAC,MAAO,QAChDL,EAAKpE,IAAIC,WAAWiB,IAAIkD,EAAK7B,eAC7B6B,EAAKpE,IAAIiB,OAAOC,IAAI,cAAe,WACjCkD,EAAKxB,kBAAkB8B,QAAQC,uDAsDjBC,EAAWC,EAAWC,GACpCxG,KAAKe,MAAME,SAAWsF,EAAUtF,QAClCjB,KAAK6C,yBAvKO4D,aCClBC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.c0b7a45c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nconst ymaps = window.ymaps;\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      newPointName: \"\",\r\n      /* `points` item structure: {\r\n          id,\r\n          name,\r\n          ymapsObj: Yandex Maps GeoObject\r\n      } */\r\n      points: [],\r\n      mapReady: false\r\n    };\r\n    this.map = undefined;\r\n    this.nextPointId = 1;\r\n    this.ymapsRouteObj = undefined;\r\n    this.newPointNameInput = React.createRef();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"points-editor\">\r\n          <form onSubmit={this.handleNewPointSubmit}>\r\n            <legend>New waypoint</legend>\r\n            <input\r\n              disabled={!this.state.mapReady}\r\n              required\r\n              autoFocus\r\n              type=\"text\"\r\n              placeholder=\"Name\"\r\n              value={this.state.newPointName}\r\n              onChange={this.handleNewPointNameChange}\r\n              ref={this.newPointNameInput}\r\n            />\r\n          </form>\r\n          <ol className=\"points-list\">\r\n            {this.state.points.map((point, pointInd) => (\r\n              <li\r\n                key={point.id}\r\n                draggable\r\n                onDragStart={(e) => this.handlePointListItemDragStart(e, point)}\r\n                onDragOver={this.allowDrop}\r\n                onDrop={(e) => this.handlePointListItemDrop(e, point)}\r\n                onDragEnd={this.handlePointListItemDragEnd}\r\n                className=\"point\"\r\n                >\r\n                <span>\r\n                  {point.name}\r\n                </span>\r\n                <button\r\n                  onClick={(event) => this.removePoint(pointInd)}\r\n                  className=\"delete\"\r\n                >\r\n                  X\r\n                  </button>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n        <div id=\"map\" className=\"map\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handlePointListItemDragEnd = (event) => {\r\n    this._draggedPoint = null;\r\n  }\r\n\r\n  handlePointListItemDragStart = (event, draggedPoint) => {\r\n    this._draggedPoint = draggedPoint;\r\n    event.dataTransfer.setData(\"text\", \"Stub data\");\r\n  }\r\n\r\n  handlePointListItemDrop = (event, dropOntoPoint) => {\r\n    event.preventDefault();\r\n    if (this._draggedPoint) {\r\n      this.setState((state, props) => {\r\n        const newStatePoints = state.points.slice();\r\n        const dropOntoPointInd = state.points.indexOf(dropOntoPoint);\r\n        const draggedPointInd = state.points.indexOf(this._draggedPoint);\r\n        newStatePoints.splice(draggedPointInd, 1);\r\n        newStatePoints.splice(dropOntoPointInd, 0, this._draggedPoint);\r\n        return { points: newStatePoints };\r\n      });\r\n    }\r\n  }\r\n\r\n  allowDrop (event) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  removePoint = (pointInd) => {\r\n    this.setState((state, props) => {\r\n      const newStatePoints = state.points.slice();\r\n      const pointToREmove = state.points[pointInd];\r\n      newStatePoints.splice(pointInd, 1);\r\n      this.map.geoObjects.remove(pointToREmove.ymapsObj);\r\n      return { points: newStatePoints };\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const ymapsInit = () => {\r\n      this.setState({mapReady: true});\r\n      this.map = new ymaps.Map(\"map\", {\r\n        center: [55.76, 37.64],\r\n        zoom: 10\r\n      });\r\n      this.ymapsRouteObj = new ymaps.Polyline([55.76, 37.64]);\r\n      this.map.geoObjects.add(this.ymapsRouteObj);\r\n      this.map.events.add(\"actionbegin\", () => {\r\n        this.newPointNameInput.current.focus();\r\n      });\r\n    };\r\n    ymaps.ready(ymapsInit);\r\n  }\r\n\r\n  handleNewPointSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newPointName = this.state.newPointName;\r\n    this.setState((state, props) => {\r\n      let newStatePoints = state.points.slice();\r\n      const newPointId = this.nextPointId;\r\n      this.nextPointId++;\r\n      let newYmapsPoint = new ymaps.GeoObject({\r\n        geometry: {\r\n          type: \"Point\",\r\n          coordinates: this.map.getCenter()\r\n        },\r\n        properties: {\r\n          balloonContent: newPointName\r\n        }\r\n      }, { draggable: true }\r\n      );\r\n      newYmapsPoint.events.add(\"geometrychange\", () => {\r\n        // TODO the route flickers when we move points around. Fix it?\r\n        this.mapRefreshRoute();\r\n      });\r\n      this.map.geoObjects.add(newYmapsPoint);\r\n      newStatePoints.push(\r\n        {\r\n          id: newPointId,\r\n          name: newPointName,\r\n          ymapsObj: newYmapsPoint\r\n        }\r\n      );\r\n      return { points: newStatePoints, newPointName: \"\" };\r\n    });\r\n  }\r\n\r\nmapRefreshRoute = () => {\r\n    const routeCoordinates = [];\r\n    for (let point of this.state.points) {\r\n      // For a point, its bounds is a 0 area rectangle.\r\n      let pointCoordinates = point.ymapsObj.geometry.getBounds()[0];\r\n      routeCoordinates.push(pointCoordinates);\r\n    }\r\n    this.ymapsRouteObj.geometry.setCoordinates(routeCoordinates);\r\n  }\r\n\r\n  handleNewPointNameChange = (event) => {\r\n    this.setState({ newPointName: event.target.value });\r\n  }\r\n\r\n  componentDidUpdate (prevProps, prevState, snapshot) {\r\n    if (this.state.points !== prevState.points) {\r\n      this.mapRefreshRoute();\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}